import { loadConfig } from '../utilities/load-config.js';
import { path, error as kitError, file } from '@shopify/cli-kit';
import { getDependencies, getPackageName, pnpmLockfile, yarnLockfile, } from '@shopify/cli-kit/node/node-package-manager';
class AppErrors {
    constructor() {
        this.errors = {};
    }
    addError(path, message) {
        this.errors[path] = message;
    }
    getError(path) {
        return this.errors[path];
    }
    isEmpty() {
        return Object.keys(this.errors).length === 0;
    }
    toJSON() {
        return Object.values(this.errors);
    }
}
class HydrogenAppLoader {
    constructor({ directory }) {
        this.errors = new AppErrors();
        this.directory = directory;
    }
    async loaded() {
        if (!(await file.exists(this.directory))) {
            throw new kitError.Abort(`Couldn't find directory ${this.directory}`);
        }
        const { configuration } = await this.loadConfig();
        const yarnLockPath = path.join(this.directory, yarnLockfile);
        const yarnLockExists = await file.exists(yarnLockPath);
        const pnpmLockPath = path.join(this.directory, pnpmLockfile);
        const pnpmLockExists = await file.exists(pnpmLockPath);
        const packageJSONPath = path.join(this.directory, 'package.json');
        const name = await getPackageName(packageJSONPath);
        const nodeDependencies = await getDependencies(packageJSONPath);
        const tsConfigExists = await file.exists(path.join(this.directory, 'tsconfig.json'));
        const language = tsConfigExists && nodeDependencies.typescript ? 'TypeScript' : 'JavaScript';
        let packageManager;
        if (yarnLockExists) {
            packageManager = 'yarn';
        }
        else if (pnpmLockExists) {
            packageManager = 'pnpm';
        }
        else {
            packageManager = 'npm';
        }
        const app = {
            name: name ?? path.basename(this.directory),
            directory: this.directory,
            configuration,
            packageManager,
            nodeDependencies,
            language,
        };
        if (!this.errors.isEmpty())
            app.errors = this.errors;
        return app;
    }
    async loadConfig() {
        const abortError = new kitError.Abort(`Couldn't find hydrogen configuration file`);
        try {
            const config = await loadConfig({ root: this.directory });
            if (!config) {
                throw abortError;
            }
            return config;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (error) {
            abortError.stack = error.stack;
            throw abortError;
        }
    }
}
export async function load(directory) {
    const loader = new HydrogenAppLoader({ directory });
    return loader.loaded();
}
//# sourceMappingURL=hydrogen.js.map