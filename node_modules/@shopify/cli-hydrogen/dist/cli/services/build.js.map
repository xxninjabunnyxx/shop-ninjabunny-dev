{"version":3,"file":"build.js","sourceRoot":"","sources":["../../../src/cli/services/build.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,KAAK,IAAI,SAAS,EAAC,MAAM,MAAM,CAAA;AACvC,OAAO,EAAC,EAAE,EAAE,WAAW,EAAE,KAAK,IAAI,QAAQ,EAAC,MAAM,kBAAkB,CAAA;AAUnE,KAAK,UAAU,KAAK,CAAC,EAAC,SAAS,EAAE,OAAO,EAAE,IAAI,EAAa;IACzD,MAAM,YAAY,GAAG,EAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAC,CAAA;IAE5C,MAAM,KAAK,GAAmB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;SAClD,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC;SAC7B,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QACpB,OAAO;YACL,KAAK,EAAE,YAAY,GAAG,OAAO;YAC7B,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE;gBACtB,IAAI,GAAG,KAAK,QAAQ,EAAE;oBACpB,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAA;iBAC5B;gBACD,IAAI;oBACF,MAAM,SAAS,CAAC;wBACd,GAAG,YAAY;wBACf,KAAK,EAAE;4BACL,MAAM,EAAE,QAAQ,GAAG,EAAE;4BACrB,GAAG,EAAE,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;4BAClD,QAAQ,EAAE,GAAG,KAAK,QAAQ;yBAC3B;qBACF,CAAC,CAAA;oBACF,8DAA8D;iBAC/D;gBAAC,OAAO,KAAU,EAAE;oBACnB,MAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;oBACpD,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAA;oBAC9B,MAAM,UAAU,CAAA;iBACjB;gBAED,IAAI,CAAC,KAAK,GAAG,SAAS,GAAG,OAAO,CAAA;YAClC,CAAC;SACF,CAAA;IACH,CAAC,CAAC,CAAA;IAEJ,MAAM,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAC,cAAc,EAAE,WAAW,CAAC,KAAK,CAAC,UAAU,EAAE,EAAC,CAAC,CAAA;IAEjF,MAAM,IAAI,CAAC,GAAG,EAAE,CAAA;AAClB,CAAC;AAED,eAAe,KAAK,CAAA","sourcesContent":["import {build as viteBuild} from 'vite'\nimport {ui, environment, error as kitError} from '@shopify/cli-kit'\n\ntype Target = 'node' | 'client' | 'worker'\n\ninterface DevOptions {\n  directory: string\n  targets: {[key in Target]: boolean | string}\n  base?: string\n}\n\nasync function build({directory, targets, base}: DevOptions) {\n  const commonConfig = {base, root: directory}\n\n  const tasks: ui.ListrTask[] = Object.entries(targets)\n    .filter(([_, value]) => value)\n    .map(([key, value]) => {\n      return {\n        title: `Building ${key} code`,\n        task: async (_, task) => {\n          if (key === 'worker') {\n            process.env.WORKER = 'true'\n          }\n          try {\n            await viteBuild({\n              ...commonConfig,\n              build: {\n                outDir: `dist/${key}`,\n                ssr: typeof value === 'string' ? value : undefined,\n                manifest: key === 'client',\n              },\n            })\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          } catch (error: any) {\n            const abortError = new kitError.Abort(error.message)\n            abortError.stack = error.stack\n            throw abortError\n          }\n\n          task.title = `Built ${key} code`\n        },\n      }\n    })\n\n  const list = ui.newListr(tasks, {rendererSilent: environment.local.isUnitTest()})\n\n  await list.run()\n}\n\nexport default build\n"]}