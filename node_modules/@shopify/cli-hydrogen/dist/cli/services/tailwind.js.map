{"version":3,"file":"tailwind.js","sourceRoot":"","sources":["../../../src/cli/services/tailwind.ts"],"names":[],"mappings":"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","sourcesContent":["import {HydrogenApp} from '../models/hydrogen.js'\nimport {ui, vscode, system, path, file, error} from '@shopify/cli-kit'\nimport {addNPMDependenciesWithoutVersionIfNeeded} from '@shopify/cli-kit/node/node-package-manager'\nimport stream from 'node:stream'\n\ninterface AddTailwindOptions {\n  app: HydrogenApp\n  force: boolean\n  directory: string\n  install: boolean\n}\n\nconst tailwindImports = [\n  \"@import 'tailwindcss/base';\",\n  \"@import 'tailwindcss/components';\",\n  \"@import 'tailwindcss/utilities';\",\n]\n\nconst tailwindImportsExist = (indexCSS: string) =>\n  tailwindImports.map((el) => new RegExp(el)).every((tailwindDirective) => tailwindDirective.test(indexCSS))\n\nexport async function addTailwind({app, force, install, directory}: AddTailwindOptions) {\n  const list = ui.newListr([\n    {\n      title: 'Installing additional dependencies',\n      skip: () => !install,\n      task: async (_, task) => {\n        const requiredDependencies = ['postcss', 'postcss-loader', 'tailwindcss', 'autoprefixer']\n        await addNPMDependenciesWithoutVersionIfNeeded(requiredDependencies, {\n          packageManager: app.packageManager,\n          type: 'prod',\n          directory: app.directory,\n          stderr: new stream.Writable({\n            write(chunk, encoding, next) {\n              task.output = chunk.toString()\n              next()\n            },\n          }),\n          stdout: new stream.Writable({\n            write(chunk, encoding, next) {\n              task.output = chunk.toString()\n              next()\n            },\n          }),\n        })\n        task.title = 'Dependencies installed'\n      },\n    },\n\n    {\n      title: 'Adding PostCSS configuration',\n      task: async (_, task) => {\n        const postCSSConfiguration = path.join(directory, 'postcss.config.js')\n\n        if (await file.exists(postCSSConfiguration)) {\n          if (force) {\n            await file.remove(postCSSConfiguration)\n          } else {\n            throw new error.Abort('PostCSS config already exists.\\nUse --force to override existing config.')\n          }\n        }\n\n        const postCSSConfig = await file.format(\n          ['module.exports = {', 'plugins: {', 'tailwindcss: {},', 'autoprefixer: {},', '},', ' };'].join('\\n'),\n          {path: 'postcss.config.js'},\n        )\n\n        await file.write(postCSSConfiguration, postCSSConfig)\n\n        task.title = 'PostCSS configuration added'\n      },\n    },\n\n    {\n      title: 'Initializing Tailwind CSS...',\n      task: async (_, task) => {\n        const tailwindConfigurationPath = path.join(directory, 'tailwind.config.js')\n\n        if (await file.exists(tailwindConfigurationPath)) {\n          if (force) {\n            await file.remove(tailwindConfigurationPath)\n          } else {\n            throw new error.Abort('Tailwind config already exists.\\nUse --force to override existing config.')\n          }\n        }\n\n        await system.exec(app.packageManager, ['tailwindcss', 'init', tailwindConfigurationPath], {\n          cwd: directory,\n        })\n\n        await replace(\n          'content: []',\n          \"content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}']\",\n          tailwindConfigurationPath,\n        )\n\n        task.title = 'Tailwind configuration added'\n      },\n    },\n    {\n      title: 'Importing Tailwind CSS in index.css',\n      task: async (_ctx, task) => {\n        const indexCSSPath = path.join(directory, 'src', 'index.css')\n        const indexCSS = await file.read(indexCSSPath)\n\n        if (tailwindImportsExist(indexCSS)) {\n          task.skip('Imports already exist in index.css')\n        } else {\n          const newIndexCSS = tailwindImports.join('\\n') + indexCSS\n\n          await file.write(indexCSSPath, newIndexCSS)\n        }\n\n        task.title = 'Tailwind imports added'\n      },\n    },\n    {\n      title: 'Adding editor plugin recommendations',\n      task: async (_, task) => {\n        await vscode.addRecommendedExtensions(directory, ['csstools.postcss', 'bradlc.vscode-tailwindcss'])\n        task.title = 'Editor plugin recommendations added'\n      },\n    },\n  ])\n  await list.run()\n}\n\nasync function replace(find: string | RegExp, replace: string, filepath: string) {\n  const original = await file.read(filepath)\n  const modified = original.replace(find, replace)\n  await file.write(filepath, modified)\n}\n"]}