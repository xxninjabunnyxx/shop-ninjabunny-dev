/// <reference types="node" />
/**
 * It returns true if the terminal is interactive.
 * @returns {boolean} True if the terminal is interactive.
 */
export declare function isTerminalInteractive(): boolean;
/**
 * Returns the path to the user's home directory.
 * @returns {string} The path to the user's home directory.
 */
export declare function homeDirectory(): string;
/**
 * Returns true if the CLI is running in debug mode.
 * @param env The environment variables from the environment of the current process.
 * @returns true if SHOPIFY_ENV is development
 */
export declare function isDevelopment(env?: NodeJS.ProcessEnv): boolean;
/**
 * Returns true if the CLI is running in verbose mode.
 * @param env The environment variables from the environment of the current process.
 * @returns true if SHOPIFY_FLAG_VERBOSE is truthy or the flag --verbose has been passed
 */
export declare function isVerbose(env?: NodeJS.ProcessEnv): boolean;
/**
 * Returns true if the environment in which the CLI is running is either
 * a local environment (where dev is present) or a cloud environment (spin).
 * @returns {boolean} True if the CLI is used in a Shopify environment.
 */
export declare function isShopify(env?: NodeJS.ProcessEnv): Promise<boolean>;
/**
 * This variable is used when running unit tests to indicate that the CLI's business logic
 * is run as a subject of a unit test. We can use this variable to disable output through
 * the standard streams.
 * @param env The environment variables from the environment of the current process.
 * @returns True if the SHOPIFY_UNIT_TEST environment variable is truthy.
 */
export declare function isUnitTest(env?: NodeJS.ProcessEnv): boolean;
/**
 * Returns true if reporting analytics is enabled.
 * @param env The environment variables from the environment of the current process.
 * @returns true unless SHOPIFY_CLI_NO_ANALYTICS is truthy or debug mode is enabled.
 */
export declare function analyticsDisabled(env?: NodeJS.ProcessEnv): boolean;
/** Returns true if reporting analytics should always happen, regardless of DEBUG mode etc. */
export declare function alwaysLogAnalytics(env?: NodeJS.ProcessEnv): boolean;
export declare function firstPartyDev(env?: NodeJS.ProcessEnv): boolean;
export declare function isDebugGoBinary(env?: NodeJS.ProcessEnv): boolean;
/**
 * Returns whether the environment has Git available.
 * @returns {Promise<boolean>} A promise that resolves with the value.
 */
export declare function hasGit(): Promise<boolean>;
/**
 * Gets info on the CI platform the CLI is running on, if applicable
 */
export declare function ciPlatform(env?: NodeJS.ProcessEnv): {
    isCI: true;
    name: string;
} | {
    isCI: false;
    name?: undefined;
};
/**
 * Gets info on the Web IDE platform the CLI is running on, if applicable
 */
export declare function webIDEPlatform(env?: NodeJS.ProcessEnv): "codespaces" | undefined;
