{"version":3,"file":"service.js","sourceRoot":"","sources":["../../src/environment/service.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,QAAQ,IAAI,mBAAmB,EAC/B,OAAO,IAAI,kBAAkB,EAC7B,QAAQ,IAAI,mBAAmB,GAChC,MAAM,cAAc,CAAA;AACrB,OAAO,EAAC,WAAW,EAAU,MAAM,uBAAuB,CAAA;AAC1D,OAAO,SAAS,MAAM,iBAAiB,CAAA;AAEvC,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,OAAgB;IAC1D,IAAI,WAAwB,CAAA;IAC5B,QAAQ,OAAO,EAAE;QACf,KAAK,UAAU;YACb,WAAW,GAAG,MAAM,mBAAmB,EAAE,CAAA;YACzC,MAAK;QACP,KAAK,UAAU;YACb,WAAW,GAAG,MAAM,mBAAmB,EAAE,CAAA;YACzC,MAAK;QACP,KAAK,SAAS;YACZ,WAAW,GAAG,MAAM,kBAAkB,EAAE,CAAA;YACxC,MAAK;KACR;IACD,OAAO,WAAW,CAAA;AACpB,CAAC;AAED;;;;;GAKG;AACH,SAAS,OAAO,CAAC,KAAyB;IACxC,IAAI,KAAK,KAAK,OAAO,EAAE;QACrB,OAAO,WAAW,CAAC,KAAK,CAAA;KACzB;SAAM,IAAI,KAAK,KAAK,MAAM,EAAE;QAC3B,OAAO,WAAW,CAAC,IAAI,CAAA;KACxB;SAAM;QACL,OAAO,WAAW,CAAC,UAAU,CAAA;KAC9B;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG;IACxC,OAAO,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAA;AACjE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG;IACvC,OAAO,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAA;AAChE,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,QAAQ,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG;IACxC,OAAO,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAA;AACjE,CAAC","sourcesContent":["import {\n  partners as partnersEnvironment,\n  shopify as shopifyEnvironment,\n  identity as identityEnvironment,\n} from './service.js'\nimport {Environment, Service} from '../network/service.js'\nimport constants from '../constants.js'\n\nexport async function environmentForService(service: Service): Promise<Environment> {\n  let environment: Environment\n  switch (service) {\n    case 'identity':\n      environment = await identityEnvironment()\n      break\n    case 'partners':\n      environment = await partnersEnvironment()\n      break\n    case 'shopify':\n      environment = await shopifyEnvironment()\n      break\n  }\n  return environment\n}\n\n/**\n * Given an environment variable that represents the environment to use for a given serve,\n * it returns the environment as a enum;\n * @param value The environment variable value.\n * @returns {Environment} representing the environment to use.\n */\nfunction service(value: undefined | string): Environment {\n  if (value === 'local') {\n    return Environment.Local\n  } else if (value === 'spin') {\n    return Environment.Spin\n  } else {\n    return Environment.Production\n  }\n}\n\n/**\n * Returns the environment to be used for the interactions with the partners' CLI API.\n * @param env The environment variables from the environment of the current process.\n */\nexport function partners(env = process.env): Environment {\n  return service(env[constants.environmentVariables.partnersEnv])\n}\n\n/**\n * Returns the environment to be used for the interactions with the admin API.\n * @param env The environment variables from the environment of the current process.\n */\nexport function shopify(env = process.env): Environment {\n  return service(env[constants.environmentVariables.shopifyEnv])\n}\n\n/**\n * Returns the environment to be used for the interactions with identity.\n * @param env The environment variables from the environment of the current process.\n */\nexport function identity(env = process.env): Environment {\n  return service(env[constants.environmentVariables.identityEnv])\n}\n"]}