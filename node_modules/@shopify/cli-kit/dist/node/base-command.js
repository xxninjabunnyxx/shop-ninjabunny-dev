import { errorHandler, registerCleanBugsnagErrorsFromWithinPlugins } from './error-handler.js';
import { isDevelopment } from '../environment/local.js';
import { addPublic } from '../metadata.js';
import { hashString } from '../string.js';
import { Command } from '@oclif/core';
// eslint-disable-next-line import/no-anonymous-default-export
export default class extends Command {
    async catch(error) {
        await errorHandler(error, this.config);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async init() {
        if (!isDevelopment()) {
            // This function runs just prior to `run`
            await registerCleanBugsnagErrorsFromWithinPlugins(this.config);
        }
        return super.init();
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async parse(options, argv) {
        const result = await super.parse(options, argv);
        await addFromParsedFlags(result.flags);
        return result;
    }
}
export async function addFromParsedFlags(flags) {
    await addPublic(() => ({
        cmd_all_verbose: flags.verbose,
        cmd_all_path_override: flags.path !== undefined,
        cmd_all_path_override_hash: flags.path === undefined ? undefined : hashString(flags.path),
    }));
}
//# sourceMappingURL=base-command.js.map