{"version":3,"file":"base-command.js","sourceRoot":"","sources":["../../src/node/base-command.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,YAAY,EAAE,2CAA2C,EAAC,MAAM,oBAAoB,CAAA;AAC5F,OAAO,EAAC,aAAa,EAAC,MAAM,yBAAyB,CAAA;AACrD,OAAO,EAAC,SAAS,EAAC,MAAM,gBAAgB,CAAA;AACxC,OAAO,EAAC,UAAU,EAAC,MAAM,cAAc,CAAA;AACvC,OAAO,EAAC,OAAO,EAAa,MAAM,aAAa,CAAA;AAE/C,8DAA8D;AAC9D,MAAM,CAAC,OAAO,MAAgB,SAAQ,OAAO;IAC3C,KAAK,CAAC,KAAK,CAAC,KAA8C;QACxD,MAAM,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;IACxC,CAAC;IAED,8DAA8D;IACpD,KAAK,CAAC,IAAI;QAClB,IAAI,CAAC,aAAa,EAAE,EAAE;YACpB,yCAAyC;YACzC,MAAM,2CAA2C,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SAC/D;QACD,OAAO,KAAK,CAAC,IAAI,EAAE,CAAA;IACrB,CAAC;IAED,8DAA8D;IACpD,KAAK,CAAC,KAAK,CACnB,OAA8C,EAC9C,IAA2B;QAE3B,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,KAAK,CAAgB,OAAO,EAAE,IAAI,CAAC,CAAA;QAC9D,MAAM,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QACtC,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,KAAyC;IAChF,MAAM,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;QACrB,eAAe,EAAE,KAAK,CAAC,OAAO;QAC9B,qBAAqB,EAAE,KAAK,CAAC,IAAI,KAAK,SAAS;QAC/C,0BAA0B,EAAE,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;KAC1F,CAAC,CAAC,CAAA;AACL,CAAC","sourcesContent":["import {errorHandler, registerCleanBugsnagErrorsFromWithinPlugins} from './error-handler.js'\nimport {isDevelopment} from '../environment/local.js'\nimport {addPublic} from '../metadata.js'\nimport {hashString} from '../string.js'\nimport {Command, Interfaces} from '@oclif/core'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default abstract class extends Command {\n  async catch(error: Error & {exitCode?: number | undefined}) {\n    await errorHandler(error, this.config)\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected async init(): Promise<any> {\n    if (!isDevelopment()) {\n      // This function runs just prior to `run`\n      await registerCleanBugsnagErrorsFromWithinPlugins(this.config)\n    }\n    return super.init()\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected async parse<TFlags extends {path?: string; verbose?: boolean}, TArgs extends {[name: string]: any}>(\n    options?: Interfaces.Input<TFlags> | undefined,\n    argv?: string[] | undefined,\n  ): Promise<Interfaces.ParserOutput<TFlags, TArgs>> {\n    const result = await super.parse<TFlags, TArgs>(options, argv)\n    await addFromParsedFlags(result.flags)\n    return result\n  }\n}\n\nexport async function addFromParsedFlags(flags: {path?: string; verbose?: boolean}) {\n  await addPublic(() => ({\n    cmd_all_verbose: flags.verbose,\n    cmd_all_path_override: flags.path !== undefined,\n    cmd_all_path_override_hash: flags.path === undefined ? undefined : hashString(flags.path),\n  }))\n}\n"]}