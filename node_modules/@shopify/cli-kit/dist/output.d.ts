/// <reference types="node" />
import { Fatal } from './error.js';
import { PackageManager } from './node/node-package-manager.js';
import { ColorContentToken, CommandContentToken, ContentToken, ErrorContentToken, HeadingContentToken, ItalicContentToken, JsonContentToken, LinesDiffContentToken, LinkContentToken, PathContentToken, RawContentToken, SubHeadingContentToken } from './content-tokens.js';
import { AbortSignal } from 'abort-controller';
import { Writable } from 'node:stream';
import type { Change } from 'diff';
export { default as logUpdate } from 'log-update';
export declare function initiateLogging(options?: {
    logDir?: string;
}): void;
export declare type Logger = (message: string) => void;
export declare class TokenizedString {
    value: string;
    constructor(value: string);
}
export declare type Message = string | TokenizedString;
export declare const token: {
    raw: (value: string) => RawContentToken;
    genericShellCommand: (value: Message) => CommandContentToken;
    json: (value: any) => JsonContentToken;
    path: (value: Message) => PathContentToken;
    link: (value: Message, link: string) => LinkContentToken;
    heading: (value: Message) => HeadingContentToken;
    subheading: (value: Message) => SubHeadingContentToken;
    italic: (value: Message) => ItalicContentToken;
    errorText: (value: Message) => ErrorContentToken;
    cyan: (value: Message) => ColorContentToken;
    yellow: (value: Message) => ColorContentToken;
    magenta: (value: Message) => ColorContentToken;
    green: (value: Message) => ColorContentToken;
    packagejsonScript: (packageManager: PackageManager, scriptName: string, ...scriptArgs: string[]) => CommandContentToken;
    successIcon: () => ColorContentToken;
    failIcon: () => ErrorContentToken;
    linesDiff: (value: Change[]) => LinesDiffContentToken;
};
export declare function content(strings: TemplateStringsArray, ...keys: (ContentToken<unknown> | string)[]): TokenizedString;
/** Log levels */
export declare type LogLevel = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace' | 'silent';
/**
 *
 * @returns {LogLevel} It returns the log level set by the user.
 */
export declare const currentLogLevel: () => LogLevel;
export declare const shouldOutput: (logLevel: LogLevel) => boolean;
export declare let collectedLogs: {
    [key: string]: string[];
};
export declare const clearCollectedLogs: () => void;
/**
 * Ouputs information to the user.
 * Info messages don't get additional formatting.
 * Note: Info messages are sent through the standard output.
 * @param content {string} The content to be output to the user.
 * @param logger {Function} The logging function to use to output to the user.
 */
export declare const info: (content: Message, logger?: Logger) => void;
/**
 * Outputs a success message to the user.
 * Success messages receive a special formatting to make them stand out in the console.
 * Note: Success messages are sent through the standard output.
 * @param content {string} The content to be output to the user.
 * @param logger {Function} The logging function to use to output to the user.
 */
export declare const success: (content: Message, logger?: Logger) => void;
/**
 * Outputs a completed message to the user.
 * Completed message receive a special formatting to make them stand out in the console.
 * Note: Completed messages are sent through the standard output.
 * @param content {string} The content to be output to the user.
 * @param logger {Function} The logging function to use to output to the user.
 */
export declare const completed: (content: Message, logger?: Logger) => void;
/**
 * Ouputs debug information to the user. By default these output is hidden unless the user calls the CLI with --verbose.
 * Debug messages don't get additional formatting.
 * Note: Debug messages are sent through the standard output.
 * @param content {string} The content to be output to the user.
 * @param logger {Function} The logging function to use to output to the user.
 */
export declare const debug: (content: Message, logger?: Logger) => void;
/**
 * Outputs a warning message to the user.
 * Warning messages receive a special formatting to make them stand out in the console.
 * Note: Warning messages are sent through the standard output.
 * @param content {string} The content to be output to the user.
 * @param logger {Function} The logging function to use to output to the user.
 */
export declare const warn: (content: Message, logger?: Logger) => void;
/**
 * Prints a new line in the terminal.
 */
export declare const newline: () => void;
/**
 * Formats and outputs a fatal error.
 * Note: This API is not intended to be used internally. If you want to
 * abort the execution due to an error, raise a fatal error and let the
 * error handler handle and format it.
 * @param content {Fatal} The fatal error to be output.
 */
export declare const error: (content: Fatal) => Promise<void>;
export declare function stringifyMessage(message: Message): string;
export interface OutputProcess {
    /** The prefix to include in the logs
     *   [vite] Output coming from Vite
     */
    prefix: string;
    /**
     * A callback to invoke the process. stdout and stderr should be used
     * to send standard output and error data that gets formatted with the
     * right prefix.
     */
    action: (stdout: Writable, stderr: Writable, signal: AbortSignal) => Promise<void>;
}
/**
 * Use this function when you have multiple concurrent processes that send data events
 * and we need to output them ensuring that they can visually differenciated by the user.
 *
 * @param processes {OutputProcess[]} A list of processes to run concurrently.
 */
export declare function concurrent(processes: OutputProcess[], callback?: ((signal: AbortSignal) => void) | undefined): Promise<void>;
export declare function logFileExists(): boolean;
export declare function logToFile(message: string, logLevel: string): void;
export declare function unstyled(message: string): string;
export declare function shouldDisplayColors(): boolean;
export declare function pageLogs({ lastCommand }: {
    lastCommand: boolean;
}): Promise<void>;
/**
 *
 * @param packageManager {PackageManager} The package manager that is being used.
 * @param version {string} The version to update to
 * @returns {te}
 */
export declare function getOutputUpdateCLIReminder(packageManager: PackageManager, version: string): string;
