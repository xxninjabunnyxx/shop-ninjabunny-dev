/// <reference types="node" />
import { Abort } from './error.js';
/**
 * A scope supported by the Shopify Admin API.
 */
declare type AdminAPIScope = 'graphql' | 'themes' | 'collaborator' | string;
/**
 * It represents the options to authenticate against the Shopify Admin API.
 */
interface AdminAPIOAuthOptions {
    /** Store to request permissions for */
    storeFqdn: string;
    /** List of scopes to request permissions for */
    scopes: AdminAPIScope[];
}
/**
 * A scope supported by the Partners API.
 */
declare type PartnersAPIScope = 'cli' | string;
interface PartnersAPIOAuthOptions {
    /** List of scopes to request permissions for */
    scopes: PartnersAPIScope[];
}
/**
 * A scope supported by the Storefront Renderer API.
 */
declare type StorefrontRendererScope = 'devtools' | string;
interface StorefrontRendererAPIOAuthOptions {
    /** List of scopes to request permissions for */
    scopes: StorefrontRendererScope[];
}
/**
 * It represents the authentication requirements and
 * is the input necessary to trigger the authentication
 * flow.
 */
export interface OAuthApplications {
    adminApi?: AdminAPIOAuthOptions;
    storefrontRendererApi?: StorefrontRendererAPIOAuthOptions;
    partnersApi?: PartnersAPIOAuthOptions;
}
export interface AdminSession {
    token: string;
    storeFqdn: string;
}
export interface OAuthSession {
    admin?: AdminSession;
    partners?: string;
    storefront?: string;
}
export declare const PartnerOrganizationNotFoundError: () => Abort;
/**
 * Ensure that we have a valid session to access the Partners API.
 * If SHOPIFY_CLI_PARTNERS_TOKEN exists, that token will be used to obtain a valid Partners Token
 * If SHOPIFY_CLI_PARTNERS_TOKEN exists, scopes will be ignored
 * @param scopes {string[]} Optional array of extra scopes to authenticate with.
 * @returns {Promise<string>} The access token for the Partners API.
 */
export declare function ensureAuthenticatedPartners(scopes?: string[], env?: NodeJS.ProcessEnv): Promise<string>;
/**
 * Ensure that we have a valid session to access the Storefront API.
 * @param scopes {string[]} Optional array of extra scopes to authenticate with.
 * @returns {Promise<string>} The access token for the Storefront API.
 */
export declare function ensureAuthenticatedStorefront(scopes?: string[]): Promise<string>;
/**
 * Ensure that we have a valid Admin session for the given store.
 * @param store {string} Store fqdn to request auth for
 * @param scopes {string[]} Optional array of extra scopes to authenticate with.
 * @returns {Promise<string>} The access token for the Admin API
 */
export declare function ensureAuthenticatedAdmin(store: string, scopes?: string[]): Promise<AdminSession>;
/**
 * This method ensures that we have a valid session to authenticate against the given applications using the provided scopes.
 * @param applications {OAuthApplications} An object containing the applications we need to be authenticated with.
 * @returns {OAuthSession} An instance with the access tokens organized by application.
 */
export declare function ensureAuthenticated(applications: OAuthApplications, env?: NodeJS.ProcessEnv): Promise<OAuthSession>;
export declare function hasPartnerAccount(partnersToken: string): Promise<boolean>;
/**
 * If the user creates an account from the Identity website, the created
 * account won't get a Partner organization created. We need to detect that
 * and take the user to create a partner organization.
 * @param partnersToken {string} Partners token
 */
export declare function ensureUserHasPartnerAccount(partnersToken: string): Promise<void>;
export declare function logout(): Promise<void>;
export {};
