import { ApplicationToken, IdentityToken } from './schema.js';
import { CodeAuthResult } from './authorize.js';
export declare class InvalidGrantError extends Error {
}
export interface ExchangeScopes {
    admin: string[];
    partners: string[];
    storefront: string[];
}
/**
 * Given a valid authorization code, request an identity access token.
 * This token can then be used to get API specific tokens.
 * @param codeData code and codeVerifier from the authorize endpoint
 * @param clientId
 * @param identityFqdn
 * @returns {Promise<IdentityToken>} An instance with the identity access tokens.
 */
export declare function exchangeCodeForAccessToken(codeData: CodeAuthResult): Promise<IdentityToken>;
/**
 * Given an identity token, request an application token.
 * @param token access token obtained in a previous step
 * @param store the store to use, only needed for admin API
 * @param clientId
 * @param identityFqdn
 * @returns {Promise<ApplicationSchema>} An array with the application access tokens.
 */
export declare function exchangeAccessForApplicationTokens(identityToken: IdentityToken, scopes: ExchangeScopes, store?: string): Promise<{
    [x: string]: ApplicationToken;
}>;
/**
 * Given an expired access token, refresh it to get a new one.
 * @param currentToken
 * @returns
 */
export declare function refreshAccessToken(currentToken: IdentityToken): Promise<IdentityToken>;
/**
 * Given a custom CLI token passed as ENV variable, request a valid partners API token
 * This token does not accept extra scopes, just the cli one.
 * @param token {string} The CLI token passed as ENV variable
 * @returns {Promise<ApplicationToken>} An instance with the application access tokens.
 */
export declare function exchangeCustomPartnerToken(token: string): Promise<ApplicationToken>;
