{"version":3,"file":"executor.js","sourceRoot":"","sources":["../../src/ui/executor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,WAAW,EAAC,MAAM,qBAAqB,CAAA;AAC/C,OAAO,EAAC,kBAAkB,EAAC,MAAM,4BAA4B,CAAA;AAC7D,OAAO,EAAC,YAAY,EAAC,MAAM,sBAAsB,CAAA;AACjD,OAAO,EAAC,cAAc,EAAC,MAAM,wBAAwB,CAAA;AAErD,OAAO,QAAuC,MAAM,UAAU,CAAA;AAC9D,OAAO,KAAK,MAAM,OAAO,CAAA;AAEzB,MAAM,CAAC,KAAK,UAAU,GAAG,CAGvB,QAAiB;IACjB,MAAM,YAAY,GAAI,QAAqB,CAAC,IAAI,CAAA;IAChD,OAAO,CAAC,MAAM,QAAQ,CAAC,MAAM,CAAC,QAAuC,EAAE,EAAC,GAAI,QAAqB,CAAC,OAAO,EAAC,CAAC,CAAC,CAC1G,YAAY,CACb,CAAA;AACH,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,QAAkB;IACvC,QAAQ,QAAQ,CAAC,IAAI,EAAE;QACrB,KAAK,OAAO;YACV,QAAQ,CAAC,cAAc,CAAC,cAAc,EAAE,WAAW,CAAC,CAAA;YACpD,OAAO;gBACL,GAAG,QAAQ;gBACX,IAAI,EAAE,cAAc;aACrB,CAAA;QACH,KAAK,UAAU;YACb,QAAQ,CAAC,cAAc,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAA;YAC1D,OAAO;gBACL,GAAG,QAAQ;gBACX,IAAI,EAAE,iBAAiB;aACxB,CAAA;QACH,KAAK,QAAQ;YACX,QAAQ,CAAC,cAAc,CAAC,eAAe,EAAE,YAAY,CAAC,CAAA;YACtD,OAAO;gBACL,GAAG,QAAQ;gBACX,IAAI,EAAE,eAAe;gBACrB,MAAM,EAAE,uBAAuB,EAAE;aAClC,CAAA;QACH,KAAK,cAAc;YACjB,QAAQ,CAAC,cAAc,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAA;YAC3D,OAAO;gBACL,GAAG,QAAQ;gBACX,IAAI,EAAE,cAAc;gBACpB,MAAM,EAAE,uBAAuB,EAAE;aAClC,CAAA;KACJ;AACH,CAAC;AAED,SAAS,WAAW,CAAC,OAAwC,EAAE,KAAK,GAAG,EAAE;IACvE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,OAAO,CACL,KAAK;aACF,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YACrC,OAAO,CAAC,EAAiC;gBACvC,OAAO,EAAE,CAAC,IAAI,CAAA;YAChB,CAAC;SACF,CAAC;aACD,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,CAC5B,CAAA;IACH,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,SAAS,cAAc,CAAC,OAAwC,EAAE,KAAK,GAAG,EAAE;IAC1E,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;IACjF,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,SAAS,uBAAuB;IAC9B,OAAO,OAAO,CAAC,GAAG,CAAC,+BAA+B,KAAK,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAA;AAC/F,CAAC","sourcesContent":["import {CustomInput} from './inquirer/input.js'\nimport {CustomAutocomplete} from './inquirer/autocomplete.js'\nimport {CustomSelect} from './inquirer/select.js'\nimport {CustomPassword} from './inquirer/password.js'\nimport {Question} from '../ui.js'\nimport inquirer, {Answers, QuestionCollection} from 'inquirer'\nimport fuzzy from 'fuzzy'\n\nexport async function run<\n  TName extends string & keyof TAnswers,\n  TAnswers extends {[key in TName]: string} = {[key in TName]: string},\n>(question: unknown): Promise<TAnswers> {\n  const questionName = (question as Question).name\n  return (await inquirer.prompt(question as QuestionCollection<Answers>, {...(question as Question).choices}))[\n    questionName\n  ]\n}\n\nexport function mapper(question: Question): unknown {\n  switch (question.type) {\n    case 'input':\n      inquirer.registerPrompt('custom-input', CustomInput)\n      return {\n        ...question,\n        type: 'custom-input',\n      }\n    case 'password':\n      inquirer.registerPrompt('custom-password', CustomPassword)\n      return {\n        ...question,\n        type: 'custom-password',\n      }\n    case 'select':\n      inquirer.registerPrompt('custom-select', CustomSelect)\n      return {\n        ...question,\n        type: 'custom-select',\n        source: getAutompleteFilterType(),\n      }\n    case 'autocomplete':\n      inquirer.registerPrompt('autocomplete', CustomAutocomplete)\n      return {\n        ...question,\n        type: 'autocomplete',\n        source: getAutompleteFilterType(),\n      }\n  }\n}\n\nfunction fuzzyFilter(answers: {name: string; value: string}[], input = '') {\n  return new Promise((resolve) => {\n    resolve(\n      fuzzy\n        .filter(input, Object.values(answers), {\n          extract(el: {name: string; value: string}) {\n            return el.name\n          },\n        })\n        .map((el) => el.original),\n    )\n  })\n}\n\nfunction containsFilter(answers: {name: string; value: string}[], input = '') {\n  return new Promise((resolve) => {\n    resolve(Object.values(answers).filter((answer) => answer.name.includes(input)))\n  })\n}\n\nfunction getAutompleteFilterType() {\n  return process.env.SHOPIFY_USE_AUTOCOMPLETE_FILTER === 'fuzzy' ? fuzzyFilter : containsFilter\n}\n"]}