{"version":3,"file":"upgrade.js","sourceRoot":"","sources":["../../../src/cli/commands/upgrade.ts"],"names":[],"mappings":"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","sourcesContent":["import {Flags} from '@oclif/core'\nimport {error, file, output, path} from '@shopify/cli-kit'\nimport {\n  addLatestNPMDependencies,\n  checkForNewVersion,\n  DependencyType,\n  getPackageManager,\n} from '@shopify/cli-kit/node/node-package-manager'\nimport Command from '@shopify/cli-kit/node/base-command'\n\nexport default class Upgrade extends Command {\n  static description = 'Upgrade the Shopify CLI'\n\n  static flags = {\n    path: Flags.string({\n      hidden: false,\n      description: 'The path to your project directory.',\n      parse: (input, _) => Promise.resolve(path.resolve(input)),\n      env: 'SHOPIFY_FLAG_PATH',\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(Upgrade)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n\n    const projectDir = await this.getProjectDir(directory)\n    if (!projectDir) {\n      throw new error.Abort(\n        output.content`Couldn't find the configuration file for ${output.token.path(\n          directory,\n        )}, are you in a Shopify project directory?`,\n      )\n    }\n    const packageJson = JSON.parse(await file.read(path.join(projectDir, 'package.json')))\n    const packageJsonDependencies: {[key: string]: string} = packageJson.dependencies || {}\n    const packageJsonDevDependencies: {[key: string]: string} = packageJson.devDependencies || {}\n\n    const cliDependency = '@shopify/cli'\n    let currentVersion: string = {...packageJsonDependencies, ...packageJsonDevDependencies}[cliDependency]\n    if (currentVersion.slice(0, 1).match(/[\\^~]/)) currentVersion = this.config.version\n    const newestVersion = await checkForNewVersion(cliDependency, currentVersion)\n\n    if (!newestVersion) {\n      output.info(\n        output.content`You're on the latest version, ${output.token.yellow(currentVersion)}, no need to upgrade!`,\n      )\n      return\n    }\n\n    output.info(\n      output.content`Upgrading CLI from ${output.token.yellow(currentVersion)} to ${output.token.yellow(\n        newestVersion,\n      )}...`,\n    )\n\n    await this.installJsonDependencies('prod', packageJsonDependencies, projectDir)\n    await this.installJsonDependencies('dev', packageJsonDevDependencies, projectDir)\n\n    output.success(`Upgraded Shopify CLI to version ${newestVersion}`)\n  }\n\n  async getProjectDir(directory: string) {\n    return path.findUp(\n      async (dir: string) => {\n        const configFilesExist = await Promise.all(\n          ['shopify.app.toml', 'hydrogen.config.js', 'hydrogen.config.ts'].map(async (configFile) => {\n            return file.exists(path.join(dir, configFile))\n          }),\n        )\n        if (configFilesExist.some((bool) => bool)) return dir\n      },\n      {\n        cwd: directory,\n        type: 'directory',\n      },\n    )\n  }\n\n  async installJsonDependencies(\n    depsEnv: DependencyType,\n    deps: {[key: string]: string},\n    directory: string,\n  ): Promise<void> {\n    const packages = ['@shopify/cli', '@shopify/app', '@shopify/cli-hydrogen']\n    const packagesToUpdate = packages.filter((pkg: string): boolean => {\n      const pkgRequirement: string | undefined = deps[pkg]\n      return Boolean(pkgRequirement)\n    })\n\n    if (packagesToUpdate.length > 0) {\n      await addLatestNPMDependencies(packagesToUpdate, {\n        packageManager: await getPackageManager(directory),\n        type: depsEnv,\n        directory,\n        stdout: process.stdout,\n        stderr: process.stderr,\n      })\n    }\n  }\n}\n"]}