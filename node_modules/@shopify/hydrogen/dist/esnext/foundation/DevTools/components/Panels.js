import React, { useState, useEffect } from 'react';
import { ClientAnalytics } from '../../Analytics/index.js';
import { Performance } from './Performance.client.js';
import { Settings } from './Settings.client.js';
const isComponentPanel = (panel) => panel.component !== undefined;
export function Panels({ settings }) {
    const [selectedPanel, setSelectedPanel] = useState(0);
    const [navigations, setNavigations] = useState([]);
    useEffect(() => {
        ClientAnalytics.subscribe(ClientAnalytics.eventNames.PERFORMANCE, ({ response_start, navigation_start, first_contentful_paint, largest_contentful_paint, response_end, page_load_type, url, transfer_size, }) => {
            setNavigations([
                ...navigations,
                {
                    ttfb: response_start - navigation_start,
                    fcp: first_contentful_paint,
                    lcp: largest_contentful_paint,
                    duration: response_end - navigation_start,
                    type: `${page_load_type} load`,
                    size: transfer_size,
                    url,
                },
            ]);
        });
    }, [setNavigations, navigations]);
    const panels = getPanels({ settings, performance: { navigations } });
    const panelComponents = panels.map((obj, index) => isComponentPanel(obj) ? (React.createElement("div", { key: obj.content, style: { display: selectedPanel === index ? 'block' : 'none' } }, obj.component)) : null);
    return (React.createElement("div", { style: { display: 'flex', height: '100%' } },
        React.createElement("div", { style: { borderRight: '1px solid', padding: '1em 0em' } }, panels.map((panel, index) => {
            const active = selectedPanel === index;
            const style = {
                padding: '0em 1.25em',
                fontWeight: 'bold',
                textDecoration: active ? 'underline' : 'none',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
            };
            if (isComponentPanel(panel)) {
                return (React.createElement("button", { key: panel.id, type: "button", style: style, onClick: () => setSelectedPanel(index) },
                    React.createElement("span", null, panel.content)));
            }
            return (React.createElement("a", { style: style, target: "_blank", rel: "noreferrer", href: panel.url, key: panel.url },
                panel.content,
                React.createElement("span", null, "\u2197")));
        })),
        React.createElement("div", { style: { padding: '1em', width: '100%' } }, panelComponents[selectedPanel ? selectedPanel : 0])));
}
function getPanels({ settings, performance }) {
    const panels = {
        settings: {
            content: 'Settings',
            component: React.createElement(Settings, { ...settings }),
        },
        performance: {
            content: 'Performance',
            component: React.createElement(Performance, { ...performance }),
        },
        graphiql: {
            content: 'GraphiQL',
            url: '/___graphql',
        },
    };
    return Object.keys(panels).map((key) => {
        return { ...panels[key], id: key };
    });
}
